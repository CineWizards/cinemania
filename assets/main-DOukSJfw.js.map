{"version":3,"file":"main-DOukSJfw.js","sources":["../../src/js/apiTrendsUpcoming.js","../../src/js/footerGoitStudents.js","../../src/js/watchTrailerControl.js"],"sourcesContent":["// Trends API\nasync function getWeeklyTrendingMovies(filter) {\n    const apiKey = 'f7b35a6831dd791ecabf3c844be80c1e';\n    const apiUrl = `https://api.themoviedb.org/3/trending/movie/day?filter=${filter}&api_key=${apiKey}`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error(`API hatası: ${response.status}`);\n        }\n\n        const data = await response.json();\n        const movies = data.results.slice(0, 3); // İlk 3 filmi al\n\n        // Filmleri HTML'de göster\n        renderTrendingMovies(movies);\n    } catch (error) {\n        console.error(\"Film verisi alınırken bir hata oluştu:\", error);\n    }\n}\n\nfunction renderTrendingMovies(movies) {\n    const cardContainer = document.querySelector('.card-container');\n    cardContainer.innerHTML = ''; // Önceki içeriği temizle\n\n    movies.forEach(movie => {\n        // Resim URL'sini oluştur\n        const imageUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n        // Film kartını oluştur\n        const card = document.createElement('div');\n        card.className = 'card';\n\n        card.innerHTML = `\n            <img src=\"${imageUrl}\" alt=\"${movie.title}\">\n            <div class=\"card-info\">\n                <h3>${movie.title}</h3>\n                <p>${getGenres(movie.genre_ids)} | ${formatMovieDate(movie.release_date)}</p>\n                <div class=\"rating\">${getStarRating(movie.vote_average)}</div>\n            </div>\n        `;\n\n        cardContainer.appendChild(card);\n    });\n}\n\n// Derecelendirme yıldızlarını gösteren yardımcı fonksiyon\nfunction getStarRating(rating) {\n    const fullStars = '★'.repeat(Math.floor(rating / 2));\n    const emptyStars = '☆'.repeat(5 - Math.floor(rating / 2));\n    return fullStars + emptyStars;\n}\n\n// Genre ID'lerini türe çeviren fonksiyon\nfunction getGenresMovies(genreIds) {\n    const genreMap = {\n        28: \"Action\",\n        35: \"Comedy\",\n        18: \"Drama\",\n        27: \"Horror\",\n    };\n\n    return genreIds.map(id => genreMap[id] || \"Unknown\").join(', ');\n}\n\n// Tarihi okunabilir formata çeviren yardımcı fonksiyon (İsmi değiştirildi)\nfunction formatMovieDate(dateStr) {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    const date = new Date(dateStr);\n    return date.toLocaleDateString(undefined, options);\n}\n\n\ngetWeeklyTrendingMovies('sci-fi');\n\n\n// Upcoming API\nasync function getUpcomingMovies(filter) {\n    const apiKey = 'f7b35a6831dd791ecabf3c844be80c1e'; \n    const apiUrl = `https://api.themoviedb.org/3/movie/upcoming?filter=${filter}&api_key=${apiKey}`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error(`API hatası: ${response.status}`);\n        }\n\n        const data = await response.json();\n        const movies = data.results.slice(0, 3); // İlk 3 filmi al\n\n        // Filmleri HTML'de göster\n        renderUpcomingMovies(movies);\n    } catch (error) {\n        console.error(\"Film verisi alınırken bir hata oluştu:\", error);\n    }\n}\n\nfunction renderUpcomingMovies(movies) {\n    const upcomingContainer = document.querySelector('.upcomingContainer');\n    upcomingContainer.innerHTML = ''; // Önceki içeriği temizle\n\n    movies.forEach(movie => {\n        // Film kartını oluştur\n        const movieCard = document.createElement('div');\n        movieCard.className = 'movieCard';\n\n        // Tam resim URL'sini oluştur (örnek: TMDb için)\n        const imageUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n        movieCard.innerHTML = `\n            <img src=\"${imageUrl}\" alt=\"${movie.title}\" class=\"moviePoster\" width=\"\" height=\"\">\n            <div class=\"movieDetails\">\n                <div class=\"movieTitle\">\n                    <h2 class=\"movieTitle\">${movie.title}</h2>\n                </div>\n                <div class=\"movieDetailsContainer\">\n                    <div class=\"movieDetailsTitles\">\n                        <h1>Release date</h1>\n                        <h1>Vote / Votes</h1>\n                        <h1>Popularity</h1>\n                        <h1>Genre</h1>\n                        <h1><br />ABOUT</h1>\n                    </div>\n                    <div class=\"movieDetailsDescription\">\n                        <p class=\"releaseDate\">${formatDate(movie.release_date)}</p>\n                        <p class=\"votes\"><span class=\"rating\">${movie.vote_average}</span> / <span class=\"total-votes\">${movie.vote_count}</span></p>\n                        <p class=\"popularity\"><span>${movie.popularity}</span></p>\n                        <p class=\"genre\">${getGenres(movie.genre_ids)}</p>\n                    </div>\n                </div>\n                <div class=\"movieDetailsAbout\">\n                    <p class=\"description\">\n                        ${movie.overview}\n                    </p>\n                </div>\n                <button class=\"add-library-btn\">Add to my library</button>\n            </div>\n        `;\n\n        upcomingContainer.appendChild(movieCard);\n    });\n}\n\n// Yardımcı fonksiyonlar\nfunction formatDate(dateStr) {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    const date = new Date(dateStr);\n    return date.toLocaleDateString(undefined, options);\n}\n\nfunction getGenres(genreIds) {\n    const genreMap = {\n        28: \"Action\",\n        35: \"Comedy\",\n        18: \"Drama\",\n        27: \"Horror\",\n    };\n    \n    return genreIds.map(id => genreMap[id]).join(', ');\n}\n\n\ngetUpcomingMovies('action');\n","document.querySelector('.about-link').addEventListener('click', () => {\n        document.querySelector('.about').classList.remove('hidden');\n        document.querySelector('header').classList.add('hidden')\n        document.querySelector('main').classList.add('hidden')\n        document.querySelector('.footer-container').classList.add('hidden')\n});\n\ndocument.querySelector('.about-x').addEventListener('click', () => {\n    document.querySelector('.about').classList.add('hidden')\n    document.querySelector('header').classList.remove('hidden')\n    document.querySelector('main').classList.remove('hidden')\n    document.querySelector('.footer-container').classList.remove('hidden')\n})","// Function to dynamically create movie cards\nfunction createMovieCard(movie) {\n    const cardContainer = document.querySelector('.card-container');\n  \n    // Create card element\n    const card = document.createElement('div');\n    card.classList.add('card');\n  \n    // Create and set movie image\n    const img = document.createElement('img');\n    img.src = movie.imageUrl;  // assuming 'imageUrl' is part of the API response\n    img.alt = movie.title;\n  \n    // Create card info section\n    const cardInfo = document.createElement('div');\n    cardInfo.classList.add('card-info');\n  \n    // Movie title\n    const title = document.createElement('h3');\n    title.textContent = movie.title;\n  \n    // Movie genre and year\n    const description = document.createElement('p');\n    description.textContent = `${movie.genre} | ${movie.year}`;\n  \n    // Movie rating\n    const rating = document.createElement('div');\n    rating.classList.add('rating');\n    rating.textContent = movie.rating;  // e.g., '★★★★★' or a numeric value\n  \n    // Trailer button\n    const trailerButton = document.createElement('button');\n    trailerButton.classList.add('trailer-btn');\n    trailerButton.textContent = 'Watch Trailer';\n    \n    // Set the trailer link in the button's data attribute\n    trailerButton.setAttribute('data-trailer', movie.trailerUrl); // assuming 'trailerUrl' is part of the API response\n  \n    // Add event listener to handle trailer opening\n    trailerButton.addEventListener('click', function() {\n      const trailerLink = this.getAttribute('data-trailer');\n      if (trailerLink) {\n        // Open trailer in popup window if available\n        window.open(trailerLink, '_blank', 'width=800,height=600');\n      } else {\n        // Show alert if no trailer is available\n        alert('Trailer not available for this movie.');\n      }\n    });\n  \n    // Append elements to card info and card\n    cardInfo.appendChild(title);\n    cardInfo.appendChild(description);\n    cardInfo.appendChild(rating);\n    cardInfo.appendChild(trailerButton);\n    \n    card.appendChild(img);\n    card.appendChild(cardInfo);\n  \n    // Append card to the card container\n    cardContainer.appendChild(card);\n  }\n  \n  // Example of how you would handle the API response and create cards dynamically\n  function handleApiResponse(movies) {\n    movies.forEach(movie => {\n      createMovieCard(movie);  // Create card for each movie returned by the API\n    });\n  }\n  \n  // Fetch movies from the API (replace 'your-api-url' with the actual API endpoint)\n  fetch('your-api-url')\n    .then(response => response.json())\n    .then(data => {\n      handleApiResponse(data.movies);  // assuming 'movies' is an array in the API response\n    })\n    .catch(error => console.error('Error fetching movie data:', error));\n  "],"names":["getWeeklyTrendingMovies","filter","apiUrl","response","movies","renderTrendingMovies","error","cardContainer","movie","imageUrl","card","getGenres","formatMovieDate","getStarRating","rating","fullStars","emptyStars","dateStr","options","getUpcomingMovies","renderUpcomingMovies","upcomingContainer","movieCard","formatDate","genreIds","genreMap","id","createMovieCard","img","cardInfo","title","description","trailerButton","trailerLink","handleApiResponse","data"],"mappings":"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"}